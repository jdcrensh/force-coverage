/**
 *  Class auto-generated using node-force-coverage
 *
 *    https://github.com/jdcrensh/node-force-coverage
 *
 *    Date: {{date}}
 *    Code coverage from tests: {{stats.linesCovered}}/{{stats.totalLines}} ({{stats.coveragePercent}}%)
 *    Target coverage: {{stats.targetPercentCoverage}}%
 *    Code coverage deficit: {{stats.coverageMissing}} lines
 *    Inflation required to meet target: {{stats.inflationRequired}} lines
 *    Inflation generated: {{stats.inflationGenerated}} lines
 *
 */
public class CoverageInflation {

    testMethod static void testInflate() {
        System.debug(inflate());
    }

    public static Integer inflate() {
        Integer i = 0, j = 1;
        Type inflatorType;
        while ((inflatorType = Type.forName('CoverageInflation.Inflator_' + j++)) != null) {
            Inflator inflator = (Inflator) inflatorType.newInstance();
            i = inflator.inflate(i);
        }
        return i;
    }

    public interface Inflator {
        Integer inflate(Integer i);
    }

    {{#inflation}}
    public class Inflator_{{.}} implements Inflator {
        public Integer inflate(Integer i) {
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            return i;
        }
    }

    {{/inflation}}
}
